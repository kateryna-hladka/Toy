// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Toy.Models;

#nullable disable

namespace Toy.Migrations
{
    [DbContext(typeof(ToyContext))]
    [Migration("20250113124116_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Toy.Models.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("amount");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__Basket__3213E83F3C6DEFC0");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Basket", (string)null);
                });

            modelBuilder.Entity("Toy.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Brand__3213E83FE6054E4B");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("Toy.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Category__3213E83F0D2C2E43");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Toy.Models.CountryProducer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Country___3213E83F74FA6766");

                    b.ToTable("Country_Producer", (string)null);
                });

            modelBuilder.Entity("Toy.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTimeEnd")
                        .HasColumnType("datetime")
                        .HasColumnName("date_time_end");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("datetime")
                        .HasColumnName("date_time_start");

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("unit_id");

                    b.Property<decimal>("Value")
                        .HasColumnType("money")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("PK__Discount__3213E83F381D3CA2");

                    b.HasIndex("UnitId");

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("Toy.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Material__3213E83F79CE17D9");

                    b.ToTable("Material", (string)null);
                });

            modelBuilder.Entity("Toy.Models.Packaging", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Hight")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("hight");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("length");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("name");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("unit_id");

                    b.Property<decimal?>("Width")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("PK__Packagin__3213E83F6AF0CE2F");

                    b.HasIndex("UnitId");

                    b.ToTable("Packaging", (string)null);
                });

            modelBuilder.Entity("Toy.Models.PhoneMe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("time")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("PK__Phone_Me__3213E83F0BBFF5E0");

                    b.ToTable("Phone_Me", (string)null);
                });

            modelBuilder.Entity("Toy.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_Main");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("photo_url");

                    b.HasKey("Id")
                        .HasName("PK__Photo__3213E83FEC759EFE");

                    b.ToTable("Photo", (string)null);
                });

            modelBuilder.Entity("Toy.Models.PhotoBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    b.Property<int>("PhotoId")
                        .HasColumnType("int")
                        .HasColumnName("photo_id");

                    b.HasKey("Id")
                        .HasName("PK__Photo_Br__3213E83F7351D051");

                    b.HasIndex("BrandId");

                    b.HasIndex("PhotoId");

                    b.ToTable("Photo_Brand", (string)null);
                });

            modelBuilder.Entity("Toy.Models.PhotoProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PhotoId")
                        .HasColumnType("int")
                        .HasColumnName("photo_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("PK__Photo_Pr__3213E83F9D86A2EC");

                    b.HasIndex("PhotoId");

                    b.HasIndex("ProductId");

                    b.ToTable("Photo_Product", (string)null);
                });

            modelBuilder.Entity("Toy.Models.PhotoProductOnOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PhotoId")
                        .HasColumnType("int")
                        .HasColumnName("photo_id");

                    b.Property<int>("ProductOnOrderId")
                        .HasColumnType("int")
                        .HasColumnName("product_on_order_id");

                    b.HasKey("Id")
                        .HasName("PK__Photo_Pr__3213E83F18BB2931");

                    b.HasIndex("PhotoId");

                    b.HasIndex("ProductOnOrderId");

                    b.ToTable("Photo_Product_On_Order", (string)null);
                });

            modelBuilder.Entity("Toy.Models.PhotoReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PhotoId")
                        .HasColumnType("int")
                        .HasColumnName("photo_id");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    b.HasKey("Id")
                        .HasName("PK__Photo_Re__3213E83F745F52A3");

                    b.HasIndex("PhotoId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Photo_Review", (string)null);
                });

            modelBuilder.Entity("Toy.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("AgeFrom")
                        .HasColumnType("tinyint")
                        .HasColumnName("age_from");

                    b.Property<byte?>("AgeTo")
                        .HasColumnType("tinyint")
                        .HasColumnName("age_to");

                    b.Property<short>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("amount");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int?>("CountryProducerId")
                        .HasColumnType("int")
                        .HasColumnName("country_producer_id");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnName("material_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("PackagingId")
                        .HasColumnType("int")
                        .HasColumnName("packaging_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<string>("Sex")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("sex")
                        .IsFixedLength();

                    b.Property<decimal?>("Size")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("size");

                    b.Property<int?>("SizeUnitId")
                        .HasColumnType("int")
                        .HasColumnName("size_unit_id");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("weight");

                    b.Property<int?>("WeightUnitId")
                        .HasColumnType("int")
                        .HasColumnName("weight_unit_id");

                    b.HasKey("Id")
                        .HasName("PK__Product__3213E83F29E5D73F");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CountryProducerId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PackagingId");

                    b.HasIndex("SizeUnitId");

                    b.HasIndex("WeightUnitId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Toy.Models.ProductDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("discount_id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("PK__Product___3213E83F57FDE2A5");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Discount", (string)null);
                });

            modelBuilder.Entity("Toy.Models.ProductOnOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("PK__Product___3213E83F26B4D262");

                    b.HasIndex("UserId");

                    b.ToTable("Product_On_Order", (string)null);
                });

            modelBuilder.Entity("Toy.Models.PurchaseHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("amount");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("payment_status");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__Purchase__3213E83F828CB065");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Purchase_History", (string)null);
                });

            modelBuilder.Entity("Toy.Models.PurchaseHistoryProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("amount");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("PurchaseHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("purchase_history_id");

                    b.HasKey("Id")
                        .HasName("PK__Purchase__3213E83FC92FBBB7");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseHistoryId");

                    b.ToTable("Purchase_History_Product", (string)null);
                });

            modelBuilder.Entity("Toy.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Advantages")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("advantages");

                    b.Property<string>("Comment")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comment");

                    b.Property<string>("Disadvantages")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("disadvantages");

                    b.Property<byte>("Mark")
                        .HasColumnType("tinyint")
                        .HasColumnName("mark");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__Review__3213E83F024CA29D");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("Toy.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Unit__3213E83F185D2DF3");

                    b.ToTable("Unit", (string)null);
                });

            modelBuilder.Entity("Toy.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("PK__User__3213E83F1949C92D");

                    b.HasIndex(new[] { "Email" }, "UQ__User__AB6E616480355481")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.HasIndex(new[] { "Phone" }, "UQ__User__B43B145F916BF3D6")
                        .IsUnique()
                        .HasFilter("[phone] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Toy.Models.Basket", b =>
                {
                    b.HasOne("Toy.Models.Product", "Product")
                        .WithMany("Baskets")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Basket__product___76969D2E");

                    b.HasOne("Toy.Models.User", "User")
                        .WithMany("Baskets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Basket__user_id__778AC167");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Toy.Models.Discount", b =>
                {
                    b.HasOne("Toy.Models.Unit", "Unit")
                        .WithMany("Discounts")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Discount__unit_i__6D0D32F4");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Toy.Models.Packaging", b =>
                {
                    b.HasOne("Toy.Models.Unit", "Unit")
                        .WithMany("Packagings")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Packaging__unit___5070F446");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Toy.Models.PhotoBrand", b =>
                {
                    b.HasOne("Toy.Models.Brand", "Brand")
                        .WithMany("PhotoBrands")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK__Photo_Bra__brand__31B762FC");

                    b.HasOne("Toy.Models.Photo", "Photo")
                        .WithMany("PhotoBrands")
                        .HasForeignKey("PhotoId")
                        .IsRequired()
                        .HasConstraintName("FK__Photo_Bra__photo__367C1819");

                    b.Navigation("Brand");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Toy.Models.PhotoProduct", b =>
                {
                    b.HasOne("Toy.Models.Photo", "Photo")
                        .WithMany("PhotoProducts")
                        .HasForeignKey("PhotoId")
                        .IsRequired()
                        .HasConstraintName("FK__Photo_Pro__photo__2A164134");

                    b.HasOne("Toy.Models.Product", "Product")
                        .WithMany("PhotoProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__Photo_Pro__produ__29221CFB");

                    b.Navigation("Photo");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Toy.Models.PhotoProductOnOrder", b =>
                {
                    b.HasOne("Toy.Models.Photo", "Photo")
                        .WithMany("PhotoProductOnOrders")
                        .HasForeignKey("PhotoId")
                        .IsRequired()
                        .HasConstraintName("FK__Photo_Pro__photo__37703C52");

                    b.HasOne("Toy.Models.ProductOnOrder", "ProductOnOrder")
                        .WithMany("PhotoProductOnOrders")
                        .HasForeignKey("ProductOnOrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Photo_Pro__produ__3587F3E0");

                    b.Navigation("Photo");

                    b.Navigation("ProductOnOrder");
                });

            modelBuilder.Entity("Toy.Models.PhotoReview", b =>
                {
                    b.HasOne("Toy.Models.Photo", "Photo")
                        .WithMany("PhotoReviews")
                        .HasForeignKey("PhotoId")
                        .IsRequired()
                        .HasConstraintName("FK__Photo_Rev__photo__3864608B");

                    b.HasOne("Toy.Models.Review", "Review")
                        .WithMany("PhotoReviews")
                        .HasForeignKey("ReviewId")
                        .IsRequired()
                        .HasConstraintName("FK__Photo_Rev__revie__2DE6D218");

                    b.Navigation("Photo");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Toy.Models.Product", b =>
                {
                    b.HasOne("Toy.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Product__brand_i__5EBF139D");

                    b.HasOne("Toy.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Product__categor__5DCAEF64");

                    b.HasOne("Toy.Models.CountryProducer", "CountryProducer")
                        .WithMany("Products")
                        .HasForeignKey("CountryProducerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Product__country__60A75C0F");

                    b.HasOne("Toy.Models.Material", "Material")
                        .WithMany("Products")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Product__materia__619B8048");

                    b.HasOne("Toy.Models.Packaging", "Packaging")
                        .WithMany("Products")
                        .HasForeignKey("PackagingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Product__packagi__628FA481");

                    b.HasOne("Toy.Models.Unit", "SizeUnit")
                        .WithMany("ProductSizeUnits")
                        .HasForeignKey("SizeUnitId")
                        .HasConstraintName("FK__Product__size_un__656C112C");

                    b.HasOne("Toy.Models.Unit", "WeightUnit")
                        .WithMany("ProductWeightUnits")
                        .HasForeignKey("WeightUnitId")
                        .HasConstraintName("FK__Product__weight___6477ECF3");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("CountryProducer");

                    b.Navigation("Material");

                    b.Navigation("Packaging");

                    b.Navigation("SizeUnit");

                    b.Navigation("WeightUnit");
                });

            modelBuilder.Entity("Toy.Models.ProductDiscount", b =>
                {
                    b.HasOne("Toy.Models.Category", "Category")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Product_D__categ__70DDC3D8");

                    b.HasOne("Toy.Models.Discount", "Discount")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Product_D__disco__71D1E811");

                    b.HasOne("Toy.Models.Product", "Product")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Product_D__produ__6FE99F9F");

                    b.Navigation("Category");

                    b.Navigation("Discount");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Toy.Models.ProductOnOrder", b =>
                {
                    b.HasOne("Toy.Models.User", "User")
                        .WithMany("ProductOnOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Product_O__user___4BAC3F29");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Toy.Models.PurchaseHistory", b =>
                {
                    b.HasOne("Toy.Models.Product", "Product")
                        .WithMany("PurchaseHistories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Purchase___produ__68487DD7");

                    b.HasOne("Toy.Models.User", "User")
                        .WithMany("PurchaseHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Purchase___user___693CA210");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Toy.Models.PurchaseHistoryProduct", b =>
                {
                    b.HasOne("Toy.Models.Product", "Product")
                        .WithMany("PurchaseHistoryProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__Purchase___produ__3F115E1A");

                    b.HasOne("Toy.Models.PurchaseHistory", "PurchaseHistory")
                        .WithMany("PurchaseHistoryProducts")
                        .HasForeignKey("PurchaseHistoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Purchase___purch__40058253");

                    b.Navigation("Product");

                    b.Navigation("PurchaseHistory");
                });

            modelBuilder.Entity("Toy.Models.Review", b =>
                {
                    b.HasOne("Toy.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Review__product___7B5B524B");

                    b.HasOne("Toy.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Review__user_id__151B244E");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Toy.Models.Brand", b =>
                {
                    b.Navigation("PhotoBrands");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Toy.Models.Category", b =>
                {
                    b.Navigation("ProductDiscounts");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Toy.Models.CountryProducer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Toy.Models.Discount", b =>
                {
                    b.Navigation("ProductDiscounts");
                });

            modelBuilder.Entity("Toy.Models.Material", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Toy.Models.Packaging", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Toy.Models.Photo", b =>
                {
                    b.Navigation("PhotoBrands");

                    b.Navigation("PhotoProductOnOrders");

                    b.Navigation("PhotoProducts");

                    b.Navigation("PhotoReviews");
                });

            modelBuilder.Entity("Toy.Models.Product", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("PhotoProducts");

                    b.Navigation("ProductDiscounts");

                    b.Navigation("PurchaseHistories");

                    b.Navigation("PurchaseHistoryProducts");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Toy.Models.ProductOnOrder", b =>
                {
                    b.Navigation("PhotoProductOnOrders");
                });

            modelBuilder.Entity("Toy.Models.PurchaseHistory", b =>
                {
                    b.Navigation("PurchaseHistoryProducts");
                });

            modelBuilder.Entity("Toy.Models.Review", b =>
                {
                    b.Navigation("PhotoReviews");
                });

            modelBuilder.Entity("Toy.Models.Unit", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("Packagings");

                    b.Navigation("ProductSizeUnits");

                    b.Navigation("ProductWeightUnits");
                });

            modelBuilder.Entity("Toy.Models.User", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("ProductOnOrders");

                    b.Navigation("PurchaseHistories");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
